namespace WFC2D
{
    /// <summary>
    /// Класс, представляющий ячейку области (AreaCell), используемую в алгоритме Wave Function Collapse (WFC).
    /// Каждая ячейка хранит возможные варианты тайлов, которые могут быть в ней размещены, а также отслеживает процесс коллапса ячейки.
    /// </summary>
    public class AreaCell
    {
        /// <summary>
        /// Список всех возможных вариантов тайлов, которые могут быть размещены в данной ячейке.
        /// </summary>
        public List<int> CellVariats { get; set; }

        /// <summary>
        /// Этропия ячейки — количество возможных вариантов тайлов, которые могут быть размещены в данной ячейке.
        /// Этропия используется для оценки неопределенности в выборе тайла.
        /// </summary>
        public int Entropy => CellVariats.Count;

        /// <summary>
        /// Индекс тайла, который был выбран для этой ячейки. 
        /// Значение -1 означает, что ячейка еще не была коллапсирована.
        /// </summary>
        private int _collapsedId = -1;

        /// <summary>
        /// Свойство для получения или установки значения индекса коллапсированного тайла.
        /// При установке нового значения проверяется, не был ли уже выбран тайл для ячейки.
        /// </summary>
        public int CollapsedId
        {
            get
            {
                return _collapsedId;
            }
            set
            {
                if (_collapsedId != -1)
                    throw new InvalidOperationException("Клетка уже сколлапсировала ранее");
                _collapsedId = value;
            }
        }

        /// <summary>
        /// Конструктор класса, который инициализирует ячейку с возможными вариантами тайлов.
        /// </summary>
        /// <param name="tileCount">Общее количество тайлов, которые могут быть размещены в данной ячейке.</param>
        public AreaCell(int tileCount)
        {
            // Инициализация списка возможных вариантов тайлов для ячейки
            CellVariats = new List<int>(Enumerable.Range(0, tileCount));
        }
    }
}
